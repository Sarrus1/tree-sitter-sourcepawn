=======
view as
=======

void Test() {
    view_as<bool>(1);
    view_as < Action > ( 1 );
    view_as<bool>(Plugin_Handled);
}

---

(source_file
    (function_declaration
        returnType: (builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (expression_statement
                (view_as
                    type: (builtin_type)
                    value: (int_literal))
                (semicolon))
            (expression_statement
                (view_as
                    type: (symbol)
                    value: (int_literal))
                (semicolon))
            (expression_statement
                (view_as
                    type: (builtin_type)
                    value: (symbol))
                (semicolon)))))


============================
view as - complex expression
============================

int test = view_as<int>(2 < 5 && 10 > 8);

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (view_as
                type: (builtin_type)
                value: (binary_expression
                    left: (binary_expression
                        left: (int_literal)
                        right: (int_literal))
                    right: (binary_expression
                        left: (int_literal)
                        right: (int_literal)))))
        (semicolon)))


======================
view as inside view as
======================

bool test = view_as<bool>(view_as<int>(Plugin_Handled));

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (view_as
                type: (builtin_type)
                value: (view_as
                    type: (builtin_type)
                    value: (symbol))))
        (semicolon)))


=============
old style tag
=============

WormDirection:GetOppositeDirection() {
    _:0.2;
    Float:2;
    bool:3;
    String:mychar;
    return WormDirection:1337;
}

---

(source_file
    (function_declaration
        returnType: (symbol)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (expression_statement
                (old_style_type_cast
                    type: (old_builtin_type)
                    value: (float_literal))
                (semicolon))
            (expression_statement
                (old_style_type_cast
                    type: (old_builtin_type)
                    value: (int_literal))
                (semicolon))
            (expression_statement
                (old_style_type_cast
                    type: (old_builtin_type)
                    value: (int_literal))
                (semicolon))
            (expression_statement
                (old_style_type_cast
                    type: (old_builtin_type)
                    value: (symbol))
                (semicolon))
            (return_statement
                (old_style_type_cast
                    type: (symbol)
                    value: (int_literal))
                (semicolon)))))


=====================================
old style tag - expression with casts
=====================================

Float:GetOppositeDirection() {
    return Float:1337 + Float:4;
}

---

(source_file
    (function_declaration
        returnType: (old_builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (return_statement
                (binary_expression
                    left: (old_style_type_cast
                        type: (old_builtin_type)
                        value: (int_literal))
                    right: (old_style_type_cast
                        type: (old_builtin_type)
                        value: (int_literal)))
                (semicolon)))))