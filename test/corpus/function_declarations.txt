========================================================
local function with no arguments, no return inline block
========================================================

void MyFunc() {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


=========================================================
local function with no arguments, no return newline block
=========================================================

void MyFunc()
{

}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


==============
stock function
==============

stock void MyFunc() {}

---

(source_file
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


===============
static function
===============

static void MyFunc() {}

---

(source_file
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


=====================
static stock function
=====================

static stock void MyFunc1() {}
static      stock void MyFunc2() {}

---

(source_file
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block))
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


=====================
stock static function
=====================

stock static void MyFunc1() {}
stock     static void MyFunc2() {}

---

(source_file
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block))
  (function_declaration
    (function_storage_class)
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block)))


====================
builtin return types
====================

void MyFunc() { return; }
int MyFunc1() { return 0; }
float MyFunc2() { return 0.0; }
char MyFunc3() { return 'a'; }
bool MyFunc4() { return true; }

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (semicolon))))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (int_literal) (semicolon))))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (float_literal) (semicolon))))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (char_literal) (semicolon))))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (bool_literal) (semicolon)))))


=================
array return type
=================

int[] MyFunc() { return; }

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    returnType: (dimension)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (semicolon)))))


==============================
old style builtin return types
==============================

MyFunc0() { return 0; }
_:MyFunc1() { return 0; }
Float:MyFunc2() { return 0.0; }
String:MyFunc3() { return 'a'; }
bool:MyFunc4() { return true; }

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (int_literal) (semicolon))))
  (function_declaration
    returnType: (old_builtin_type)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (int_literal) (semicolon))))
  (function_declaration
    returnType: (old_builtin_type)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (float_literal) (semicolon))))
  (function_declaration
    returnType: (old_builtin_type)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (char_literal) (semicolon))))
  (function_declaration
    returnType: (old_builtin_type)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (bool_literal) (semicolon)))))


==================
symbol return type
==================

Handle MyFunc() { return INVALID_HANDLE; }

---

(source_file
  (function_declaration
    returnType: (symbol)
    name: (symbol)
    arguments: (argument_declarations)
    (block (return_statement (symbol) (semicolon)))))


==========================
function with one argument
==========================

void MyFunc1(int args) {}
void MyFunc2(float args) {}
void MyFunc3(char args) {}
void MyFunc4(bool args) {}
void MyFunc4(Handle args) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol)) name: (symbol)))
    (block)))


============================================
function with one argument and default value
============================================

void MyFunc1(int args = 4) {}
void MyFunc2(float args = 0.0) {}
void MyFunc3(char args = 'a') {}
void MyFunc4(bool args = false) {}
void MyFunc5(Action args = Plugin_Handled) {}
void MyFunc6(float vec[3] = {0.0, 0.0, 0.0}) {}
void MyFunc7(int mode=FOO|BAR|BAZ) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) defaultValue: (int_literal)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) defaultValue: (float_literal)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) defaultValue: (char_literal)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) defaultValue: (bool_literal)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol)) name: (symbol) defaultValue: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration
        type: (type (builtin_type))
        name: (symbol)
        (fixed_dimension (int_literal))
        defaultValue: (array_litteral
          (float_literal)
          (float_literal)
          (float_literal))))
        (block))
      (function_declaration
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations
          (argument_declaration
            type: (type
              (builtin_type))
            name: (symbol)
            defaultValue: (binary_expression
              left: (binary_expression
                left: (symbol)
                right: (symbol))
              right: (symbol))))
          (block)))


=======================================================
function with one argument and default value - oldstyle
=======================================================

MyFunc0(args = 4) {}
MyFunc1(_:args = 4) {}
MyFunc2(Float:args = 0.0) {}
MyFunc3(String:args = 'a') {}
MyFunc4(bool:args = false) {}
MyFunc5(Action:args = Plugin_Handled) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration name: (symbol) defaultValue: (int_literal)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol) defaultValue: (int_literal)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol) defaultValue: (float_literal)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol) defaultValue: (char_literal)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol) defaultValue: (bool_literal)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol)) name: (symbol) defaultValue: (symbol)))
    (block)))


==================================================
function with type casted default value - oldstyle
==================================================

MyFunc(bool:args = bool:4) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration
        type: (type (old_builtin_type))
        name: (symbol)
        defaultValue: (old_type_cast
          type: (old_builtin_type)
          value: (int_literal))))
    (block)))


================================
function with one array argument
================================

void MyFunc1(const int[] a) {}
void MyFunc2(float[] a) {}
void MyFunc3(const Handle[] a) {}
void MyFunc4(Handle[] a) {}
void MyFunc5(bool[][] a) {}
void MyFunc6(const Handle[][] a) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type) (dimension)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type) (dimension)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol) (dimension)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol) (dimension)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type) (dimension) (dimension)) name: (symbol)))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (symbol) (dimension) (dimension)) name: (symbol)))
    (block)))


===========================================
function with argument passing by reference
===========================================

void MyFunc(int &a) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block)))


=======================================================
function with argument passing by reference - old style
=======================================================

MyFunc(&a) {}
MyFunc(&Float:a) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block)))


=======================================
function with fixed size array argument
=======================================

void MyFunc(float vec[3]) {}
void MyFunc(float vec[3][3]) {}
void MyFunc(char vec[MAX_PATH]) {}
void MyFunc(char vec[MAX_PATH][3]) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) (fixed_dimension (int_literal))))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) (fixed_dimension (int_literal)) (fixed_dimension (int_literal))))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) (fixed_dimension (symbol))))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (builtin_type)) name: (symbol) (fixed_dimension (symbol)) (fixed_dimension (int_literal))))
    (block)))


=====================================
function with one argument - oldstyle
=====================================

MyFunc0(args) {}
MyFunc1(_:args) {}
MyFunc2(Float:val) {}
MyFunc3(String:char) {}
MyFunc4(bool:condition) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block)))


=====================================
function with any argument - oldstyle
=====================================

MyFunc0(any:data) {}
MyFunc1(args, any:data) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (argument_declaration type: (type (any_type)) name: (symbol)))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration name: (symbol))
      (argument_declaration type: (type (any_type)) name: (symbol)))
    (block)))


================================
function with multiple arguments
================================

void MyFunc(int a, float b, char c, bool d) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration type: (type (builtin_type)) name: (symbol))
      (argument_declaration type: (type (builtin_type)) name: (symbol))
      (argument_declaration type: (type (builtin_type)) name: (symbol))
      (argument_declaration type: (type (builtin_type)) name: (symbol)))
    (block)))


=========================================
function with multiple oldstyle arguments
=========================================

void MyFunc(a, _:b, Float:c, String:d, bool:e) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration name: (symbol))
      (argument_declaration type: (type (old_builtin_type)) name: (symbol))
      (argument_declaration type: (type (old_builtin_type)) name: (symbol))
      (argument_declaration type: (type (old_builtin_type)) name: (symbol))
      (argument_declaration type: (type (old_builtin_type)) name: (symbol)))
    (block)))


===========================
function with rest argument
===========================

void MyFunc1(any ...) {}
void MyFunc2(const char[] format, any ...) {}

---

(source_file
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations (rest_argument type: (type (any_type))))
    (block))
  (function_declaration
    returnType: (type (builtin_type))
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration
        type: (type (builtin_type) (dimension))
        name: (symbol))
      (rest_argument type: (type (any_type))))
    (block)))


=======================================
function with rest argument - old style
=======================================

MyFunc1(any:...) {}
MyFunc2(const String:format[], any:...) {}

---

(source_file
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations (rest_argument type: (type (any_type))))
    (block))
  (function_declaration
    name: (symbol)
    arguments: (argument_declarations
      (argument_declaration
        type: (type (old_builtin_type))
        name: (symbol)
        (dimension))
      (rest_argument type: (type (any_type))))
    (block)))