===========
declaration
===========

int number;
float pointnumber;
char character;
bool boolean;
char[] text;
float vec[3];
bool active[MAXPLAYERS + 1];
Action action;

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type) (dimension))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension
                (binary_expression
                    left: (symbol)
                    right: (int_literal))))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (symbol))
        (variable_declaration name: (symbol))
        (semicolon)))


==============
initialization
==============

int money = 5400;
float percent = 67.3;
char key = 'A';
bool enabled = false;
Handle handle = null;

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (int_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (float_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (char_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (bool_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (symbol))
        (variable_declaration
            name: (symbol)
            initialValue: (null))
        (semicolon)))


==========================
initialization - methodmap
==========================

ArrayList arr1 = new ArrayList();
ArrayList arr2 = new ArrayList(1, 5);

---

(source_file
    (variable_declaration_statement
        type: (type_expression (symbol))
        (variable_declaration
            name: (symbol)
            initialValue: (new_instance
                class: (symbol)
                arguments: (function_call_arguments)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (symbol))
        (variable_declaration
            name: (symbol)
            initialValue: (new_instance
                class: (symbol)
                arguments: (function_call_arguments
                    (int_literal)
                    (int_literal))))
        (semicolon)))


====================
array initialization
====================

char[] text = "Hello world";
int numbers[] = { 1, 2, 3 };
float vec[3] = { 0.0, 14.2, 13.22 };
bool client_has_stuff[MAXPLAYERS] = { true, ... };
char[] name = new char[players*2];
Action[] actions = new Action[maxActions];

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type) (dimension))
        (variable_declaration
            name: (symbol)
            initialValue: (string_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (dimension)
            initialValue: (vector (int_literal) (int_literal) (int_literal)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal))
            initialValue: (vector (float_literal) (float_literal) (float_literal)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (symbol))
            initialValue: (vector (bool_literal) (rest_operator)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type) (dimension))
        (variable_declaration
            name: (symbol)
            initialValue: (dynamic_array
                type: (builtin_type)
                (fixed_dimension (binary_expression
                    left: (symbol)
                    right: (int_literal)))))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (symbol) (dimension))
        (variable_declaration
            name: (symbol)
            initialValue: (dynamic_array
                type: (symbol)
                (fixed_dimension (symbol))))
        (semicolon)))


==========================
enum struct initialization
==========================

MyStruct s = {1, "test", 2.31, true, {1.0, 2.0, 3.0}, Plugin_Handled};

---

(source_file
    (variable_declaration_statement
        type: (type_expression (symbol))
        (variable_declaration
            name: (symbol)
            initialValue: (vector
                (int_literal)
                (string_literal)
                (float_literal)
                (bool_literal)
                (vector
                    (float_literal)
                    (float_literal)
                    (float_literal))
                (symbol)))
        (semicolon)))


=============
storage class
=============

const int a = 1;
const a = 1;
static float b;
static bool c = false;
static const char d[] = "lorem";
public const int e;

---

(source_file
    (variable_declaration_statement
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (int_literal))
        (semicolon))
    (variable_declaration_statement
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (int_literal))
        (semicolon))
    (variable_declaration_statement
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (bool_literal))
        (semicolon)))
    (variable_declaration_statement
        (variable_storage_class)
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (dimension)
            initialValue: (string_literal))
        (semicolon)))
    (variable_declaration_statement
        (variable_storage_class)
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol)
        (semicolon)))


=======================
multidimensional arrays
=======================

Action[][] a;
Action [] [] a;
float vec[MAXPLAYERS][10];
float vec [MAXPLAYERS] [10];
int bla[][] = { {1,2,3}, {4,5,6}, {7,8,9} };
char[][] name = new char[players*2][5];

---

(source_file
    (variable_declaration_statement
        type: (type_expression (symbol) (dimension) (dimension))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (symbol) (dimension) (dimension))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (symbol))
            (fixed_dimension (int_literal)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (symbol))
            (fixed_dimension (int_literal)))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (dimension)
            (dimension)
            initialValue: (vector (vector (int_literal) (int_literal) (int_literal)) (vector (int_literal) (int_literal) (int_literal)) (vector (int_literal) (int_literal) (int_literal))))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type) (dimension) (dimension))
        (variable_declaration
            name: (symbol)
            initialValue: (dynamic_array
                type: (builtin_type)
                (fixed_dimension
                    (binary_expression
                        left: (symbol)
                        right: (int_literal)))
                (fixed_dimension (int_literal))))
        (semicolon)))


==================
optional semicolon
==================

int i
bool b
float f = 2.3

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol)))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol)))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (float_literal))))


===============================
multiple variables of same type
===============================

int a, b;
bool c, d = true;
float e = 12.92, f = 1.2, g = 82.00;
char h = 'c', i;
char j[10] = "whatever!", k[256];

---

(source_file
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration name: (symbol))
        (variable_declaration
            name: (symbol)
            initialValue: (bool_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (float_literal))
        (variable_declaration
            name: (symbol)
            initialValue: (float_literal))
        (variable_declaration
            name: (symbol)
            initialValue: (float_literal))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            initialValue: (char_literal))
        (variable_declaration name: (symbol))
        (semicolon))
    (variable_declaration_statement
        type: (type_expression (builtin_type))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal))
            initialValue: (string_literal))
        (variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal)))
        (semicolon)))


===================
old style variables
===================

new a;
a;
new Float:b = 0.23;
Float:b = 0.23;
new bool:c;
new _:d = 2, Float:e, bool:f = true, String:g = 'c';
new Action:ac = INVALID_HANDLE;
Action:ac = INVALID_HANDLE;

---

(source_file
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration name: (symbol))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_declaration name: (symbol))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (float_literal))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (float_literal))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (int_literal))
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol))
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (bool_literal))
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (char_literal))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (symbol)
            name: (symbol)
            initialValue: (symbol))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_declaration
            type: (symbol)
            name: (symbol)
            initialValue: (symbol))
        (semicolon)))


============================
old style variables - arrays
============================

new a[16];
new players[MAXPLAYERS + 1];
new String:d[12] = "hello world";
new Float:origin[3] = {1.0, 2.0, 3.0};
new numbers[] = {1, 3, 5, 7, 9};

---

(source_file
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal)))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            name: (symbol)
            (fixed_dimension
                (binary_expression
                    left: (symbol)
                    right: (int_literal))))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            (fixed_dimension (int_literal))
            initialValue: (string_literal))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            (fixed_dimension (int_literal))
            initialValue: (vector (float_literal) (float_literal) (float_literal)))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            name: (symbol)
            (dimension)
            initialValue: (vector (int_literal) (int_literal) (int_literal) (int_literal) (int_literal)))
        (semicolon)))


=============================================
old style variables - multidimensional arrays
=============================================

new g_DefaultColors_c[7][4] = { {255,255,255,255}, {255,0,0,255}, {0,255,0,255}, {0,0,255,255}, {255,255,0,255}, {0,255,255,255}, {255,0,255,255} };

---

(source_file
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            name: (symbol)
            (fixed_dimension (int_literal))
            (fixed_dimension (int_literal))
            initialValue: (vector
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))
                (vector (int_literal) (int_literal) (int_literal) (int_literal))))
        (semicolon)))


===================================
old style variables - storage class
===================================

decl String:txt[256];
new const a = 2;
static bool:b = false;

---

(source_file
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            (fixed_dimension (int_literal)))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            name: (symbol)
            initialValue: (int_literal))
        (semicolon))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (bool_literal))
        (semicolon)))


========================================
old style variables - optional semicolon
========================================

new a
new bool:c = true
decl String:arg1[32]
new Handle:h = INVALID_HANDLE

---

(source_file
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration name: (symbol)))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            initialValue: (bool_literal)))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (old_builtin_type)
            name: (symbol)
            (fixed_dimension (int_literal))))
    (old_variable_declaration_statement
        (old_variable_storage_class)
        (old_variable_declaration
            type: (symbol)
            name: (symbol)
            initialValue: (symbol))))


===================
variable assignment
===================

void Test() {
    i = 2;
    i += 5;
    i -= size;
    i *= -1;
    i /= 2 + 10;
    a[1] ^= 2;
    i |= 2;
    i &= 1001;
    i ~= 0110;
    i <<= 2;
    i >>= 2;
}

---

(source_file
    (function_declaration
        returnType: (builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (symbol))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (binary_expression
                        left: (int_literal)
                        right: (int_literal)))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (array_indexed_access
                        array: (symbol)
                        index: (int_literal))
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                (semicolon)))))


==================================
variable assignment - new operator
==================================

void Test() {
    a = new char[size];
    b = new MethodMap();
}

---

(source_file
    (function_declaration
        returnType: (builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (dynamic_array
                        type: (builtin_type)
                        (fixed_dimension (symbol))))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (new_instance
                        class: (symbol)
                        arguments: (function_call_arguments)))
                (semicolon)))))


==========================================
variable assignment - indexed array access
==========================================

void Test() {
    clients[2] = 14;
    clients[client] = Math_GetRandomInt(100, 300);
}

---

(source_file
    (function_declaration
        returnType: (builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (expression_statement
                (assignment_expression
                    left: (array_indexed_access
                        array: (symbol)
                        index: (int_literal))
                    right: (int_literal))
                (semicolon))
            (expression_statement
                (assignment_expression
                    left: (array_indexed_access
                        array: (symbol)
                        index: (symbol))
                    right: (function_call
                        function: (symbol)
                        (function_call_arguments
                            (int_literal)
                            (int_literal))))
                (semicolon)))))


=================================
variable assignment as expression
=================================

void Test() {
    if ((a = Test()) != 0) return;
    a = b = 2;
}

---

(source_file
    (function_declaration
        returnType: (builtin_type)
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (condition_statement
                condition: (binary_expression
                    left: (parenthesized_expression
                        (assignment_expression
                            left: (symbol)
                            right: (function_call
                                function: (symbol)
                                (function_call_arguments))))
                    right: (int_literal))
                    truePath: (return_statement (semicolon)))
            (expression_statement
                (assignment_expression
                    left: (symbol)
                    right: (assignment_expression
                        left: (symbol)
                        right: (int_literal)))
                (semicolon)))))