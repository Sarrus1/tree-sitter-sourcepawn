========
for loop
========

public void OnPluginStart() {
    for(int i = 0; i < 0; i++) {}
    for(int i = 0; i < j; i++) {}
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (variable_declaration_statement
                    type: (type (builtin_type))
                    (variable_declaration
                        name: (symbol)
                        initialValue: (int_literal)))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement
                    (update_expression
                        argument: (symbol)))
                (block))
            (for_loop
                initialization: (variable_declaration_statement
                type: (type (builtin_type))
                (variable_declaration
                    name: (symbol)
                    initialValue: (int_literal)))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (symbol))
                
                iteration: (expression_statement
                (update_expression
                    argument: (symbol)))
                (block)))))


===============================
for loop without initialization
===============================

public void OnPluginStart() {
    for(; i < 0; i++) {

    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement
                    (update_expression
                        argument: (symbol)))
                (block)))))


==========================
for loop without iteration
==========================

public void OnPluginStart() {
    for(int i = 0 ;; i++) {

    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (variable_declaration_statement
                    type: (type (builtin_type))
                    (variable_declaration
                        name: (symbol)
                        initialValue: (int_literal)))
                
                
                iteration: (expression_statement
                    (update_expression
                        argument: (symbol)))
                (block)))))


===============================
for loop without incrementation
===============================

public void OnPluginStart() {
    for(int i = 0; i < 0; ) {

    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (variable_declaration_statement
                    type: (type (builtin_type))
                    (variable_declaration
                        name: (symbol)
                        initialValue: (int_literal)))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                    
                    (block)))))


========================
for loop without control
========================

public void OnPluginStart() {
    for(;;) {

    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                (block)))))


================
for loop - break
================

public void OnPluginStart() {
    for(;;) {
        break;
    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                (block (break_statement ))))))


===================
for loop - continue
===================

public void OnPluginStart() {
    for(;;) {
        continue;
    }
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                (block (continue_statement ))))))


===========================
for loop - single statement
===========================

public void OnPluginStart() {
    for(;;) break;
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                (break_statement )))))


=======================================
for loop - assignment as initialization
=======================================

public void OnPluginStart() {
    for(i = 0; i < 3; i++) break;
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (assignment_expression
                        left: (symbol)
                        right: (int_literal))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement (update_expression argument: (symbol)))
                (break_statement )))))


=============================
for loop - multiple variables
=============================

public void OnPluginStart() {
    for(int i = 0, j = 0, k = 0; i < 3; i++) break;
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (variable_declaration_statement
                    type: (type
                        (builtin_type))
                    (variable_declaration
                        name: (symbol)
                        initialValue: (int_literal)))
                initialization: (assignment_expression
                        left: (symbol)
                        right: (int_literal))
                initialization: (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement (update_expression argument: (symbol)))
                (break_statement )))))

==============
old - for loop
==============

public void OnPluginStart() {
    for(new i = 0; i < 3; i++) break;
    for (new entity=MaxClients+1; entity < maxEntities; entity++) {}
    for (i = 0, ii = 0; i < 14; ++i, ii += 4) {
		break;
	}
}

---

(source_file
    (function_declaration (function_visibility)
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (for_loop
                initialization: (old_variable_declaration_statement
                    (old_variable_declaration
                        name: (symbol)
                        initialValue: (int_literal)))
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement (update_expression argument: (symbol)))
                (break_statement
                ))
            (for_loop
                initialization: (old_variable_declaration_statement
                    (old_variable_declaration
                        name: (symbol)
                        initialValue: (binary_expression
                            left: (symbol)
                            right: (int_literal))))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (symbol))
                
                iteration: (expression_statement
                    (update_expression argument: (symbol)))
            (block))
            (for_loop
                initialization: (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                initialization: (assignment_expression
                    left: (symbol)
                    right: (int_literal))
                
                condition: (binary_expression
                    left: (symbol)
                    right: (int_literal))
                
                iteration: (expression_statement
                (comma_expression
                    left: (update_expression
                    argument: (symbol))
                    right: (assignment_expression
                        left: (symbol)
                        right: (int_literal))))
            (block
              (break_statement
                ))))))