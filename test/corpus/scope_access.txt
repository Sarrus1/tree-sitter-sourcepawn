======================
scope access in sizeof
======================

void Test() {
    Foo bar;
    Format(bar.baz, sizeof(Foo::baz), "%s", "lorem ipsum");
}

---

(source_file
    (function_declaration
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (variable_declaration_statement
                type: (type (symbol))
                (variable_declaration name: (symbol))
                )
            (expression_statement
                (function_call
                    function: (symbol)
                    (function_call_arguments
                        (field_access
                            target: (symbol)
                            field: (symbol))
                        (sizeof_expression
                            type: (scope_access
                            scope: (symbol)
                            field: (symbol)))
                        (string_literal)
                        (string_literal)))
                ))))

=======================
scope access expression
=======================

void Test() {
    ArrayList arr = new ArrayList();
    arr.FindValue(0, EnumStruct::member);
}

---

(source_file
    (function_declaration
        returnType: (type (builtin_type))
        name: (symbol)
        arguments: (argument_declarations)
        (block
            (variable_declaration_statement
                type: (type
                (symbol))
                (variable_declaration
                    name: (symbol)
                    initialValue: (new_instance
                        class: (symbol)
                        arguments: (function_call_arguments)))
                )
            (expression_statement
                (function_call
                    function: (field_access
                        target: (symbol)
                        field: (symbol))
                (function_call_arguments
                    (int_literal)
                    (scope_access
                        scope: (symbol)
                        field: (symbol))))
            ))))