================
switch statement
================

public void OnPluginStart() {
    switch(i) {
        case 1:
            i++;
            break;
        case 2:
            return;
        case Plugin_Handled:
        {
            i++;
            return;
        }
    }
}

---

(source_file
  (function_declaration
    (function_visibility)
    returnType: (type
      (builtin_type)
    )
    name: (symbol)
    arguments: (argument_declarations)
    body: (block
      (switch_statement
        condition: (symbol)
        (switch_case
          value: (switch_case_values
            (int_literal)
          )
          (expression_statement
            (update_expression
              argument: (symbol)
            )
          )
          (break_statement)
        )
        (switch_case
          value: (switch_case_values
            (int_literal)
          )
          (return_statement)
        )
        (switch_case
          value: (switch_case_values
            (symbol)
          )
          (block
            (expression_statement
              (update_expression
                argument: (symbol)
              )
            )
            (return_statement)
          )
        )
      )
    )
  )
)


===============================
switch statement - default case
===============================

public void OnPluginStart() {
    switch(i) {
        case 1:
            i++;
            break;
        case 2:
            return;
        default:
        {
            i++;
            return;
        }
    }
}

---

(source_file
  (function_declaration
    (function_visibility)
    returnType: (type
      (builtin_type)
    )
    name: (symbol)
    arguments: (argument_declarations)
    body: (block
      (switch_statement
        condition: (symbol)
        (switch_case
          value: (switch_case_values
            (int_literal)
          )
          (expression_statement
            (update_expression
              argument: (symbol)
            )
          )
          (break_statement)
        )
        (switch_case
          value: (switch_case_values
            (int_literal)
          )
          (return_statement)
        )
        (switch_default_case
          (block
            (expression_statement
              (update_expression
                argument: (symbol)
              )
            )
            (return_statement)
          )
        )
      )
    )
  )
)


==============================================
switch statement - multiple values in one case
==============================================

public void OnPluginStart() {
    switch(i) {
        case 1, 2, 3, 4, 5:
            return;
    }
}

---

(source_file
  (function_declaration
    (function_visibility)
    returnType: (type
      (builtin_type)
    )
    name: (symbol)
    arguments: (argument_declarations)
    body: (block
      (switch_statement
        condition: (symbol)
        (switch_case
          value: (switch_case_values
            (int_literal)
            (int_literal)
            (int_literal)
            (int_literal)
            (int_literal)
          )
          (return_statement)
        )
      )
    )
  )
)


===========================
switch statement - no cases
===========================

public void OnPluginStart() {
    switch(i) {
    }
}

---

(source_file
  (function_declaration
    (function_visibility)
    returnType: (type
      (builtin_type)
    )
    name: (symbol)
    arguments: (argument_declarations)
    body: (block
      (switch_statement
        condition: (symbol)
      )
    )
  )
)


==============================
switch statement - parentheses
==============================

void foo()
{
	switch(bar)
	{
		case (BAZ):
    {
      break;
    }
	}
}

---

(source_file
  (function_declaration
    returnType: (type
      (builtin_type)
    )
    name: (symbol)
    arguments: (argument_declarations)
    body: (block
      (switch_statement
        condition: (symbol)
        (switch_case
          value: (switch_case_values
            (symbol)
          )
          (block
            (break_statement)
          )
        )
      )
    )
  )
)
